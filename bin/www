#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vacala:server');
var http = require('http');
const https = require('https');
const fs = require('fs');
// var privateKey  = fs.readFileSync('/etc/nginx/ssl/myvacala.com.key', 'utf8');
// var certificate = fs.readFileSync('/etc/nginx/ssl/6128b8b4785af1f3.crt', 'utf8');
// var credentials = {key: privateKey, cert: certificate};

// var https = require('https');
// var fs = require('fs');
// var express = require('express');
// var app = express();
// var sslOptions;
// var server;
// var port = 4080;


// require('ssl-root-cas/latest')
//   .inject()
//   // .addFile(__dirname + '/ssl/Geotrust Cross Root CA.txt')
//   // NOTE: intermediate certificates should be bundled with
//   // the site's certificate, which is issued by the server
//   // when you connect. You only need to add them here if the
//   // server is misconfigured and you can't change it
//   //.addFile(__dirname + '/ssl/Rapid SSL CA.txt')
//   ;
 
// sslOptions = {
//   key: fs.readFileSync('./ssl/privkey.pem')
// , cert: fs.readFileSync('./ssl/fullchain.pem')
// };



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
//var credentials = {key: privateKey, cert: certificate};

var server = https.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log('Server running :', bind);
  debug('Listening on ' + bind);
}
